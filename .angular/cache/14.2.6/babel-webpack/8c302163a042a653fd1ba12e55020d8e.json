{"ast":null,"code":"import { interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/question.service\";\nimport * as i2 from \"@angular/common\";\n\nconst _c0 = function (a0) {\n  return {\n    \"width\": a0\n  };\n};\n\nfunction QuestionComponent_ng_container_3_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵelement(1, \"div\", 25);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(1, _c0, ctx_r2.progress + \"%\"));\n  }\n}\n\nfunction QuestionComponent_ng_container_3_ol_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ol\")(1, \"li\", 26);\n    i0.ɵɵlistener(\"click\", function QuestionComponent_ng_container_3_ol_29_Template_li_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const option_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.answer(ctx_r5.currentQuestion + 1, option_r4));\n    });\n    i0.ɵɵelementStart(2, \"div\", 2);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const option_r4 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", option_r4.textoRespuesta, \" \");\n  }\n}\n\nfunction QuestionComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 4)(2, \"div\", 5);\n    i0.ɵɵelement(3, \"img\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 7)(5, \"h4\", 8);\n    i0.ɵɵtext(6, \"Trivia Mundial Qatar 2022!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"h5\")(8, \"span\", 9);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(10, \"div\", 10)(11, \"div\", 11)(12, \"h5\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\", 12)(15, \"h5\")(16, \"span\", 9);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"div\", 13)(19, \"h5\");\n    i0.ɵɵtext(20);\n    i0.ɵɵelement(21, \"span\", 14);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(22, QuestionComponent_ng_container_3_div_22_Template, 2, 3, \"div\", 15);\n    i0.ɵɵelementStart(23, \"div\", 16)(24, \"div\", 2)(25, \"h3\");\n    i0.ɵɵtext(26);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(27, \"div\", 17)(28, \"div\", 2);\n    i0.ɵɵtemplate(29, QuestionComponent_ng_container_3_ol_29_Template, 4, 1, \"ol\", 18);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(30, \"div\", 19)(31, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function QuestionComponent_ng_container_3_Template_button_click_31_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.resetQuiz());\n    });\n    i0.ɵɵelement(32, \"i\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function QuestionComponent_ng_container_3_Template_button_click_33_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.nextQuestion());\n    });\n    i0.ɵɵelement(34, \"i\", 23);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate1(\"Bienvenido \", ctx_r0.name, \"!\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Puntos: \", ctx_r0.points, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" Pregunta \", ctx_r0.currentQuestion + 1, \" de 5\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Seg: \", ctx_r0.counter, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.currentQuestion < 5);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.questionList[ctx_r0.questionNumber[ctx_r0.currentQuestion]] == null ? null : ctx_r0.questionList[ctx_r0.questionNumber[ctx_r0.currentQuestion]].textoPregunta);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.questionList[ctx_r0.questionNumber[ctx_r0.currentQuestion]] == null ? null : ctx_r0.questionList[ctx_r0.questionNumber[ctx_r0.currentQuestion]].respuestaPorId);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.currentQuestion === ctx_r0.questionList.length);\n  }\n}\n\nfunction QuestionComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 27);\n    i0.ɵɵelement(2, \"img\", 28);\n    i0.ɵɵelementStart(3, \"div\", 29)(4, \"h3\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelement(6, \"br\");\n    i0.ɵɵtext(7, \" Has completado la Trivia \");\n    i0.ɵɵelement(8, \"br\");\n    i0.ɵɵtext(9, \"El resultado es:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"p\");\n    i0.ɵɵelementStart(11, \"h5\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"h5\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"h5\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"h5\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"h4\", 30);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"Felicitaciones \", ctx_r1.name, \"!\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\"Total de Preguntas: \", ctx_r1.numberQuestionTrivia, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Respuestas correctas: \", ctx_r1.correctAnswer, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Respuestas erroneas: \", ctx_r1.inCorrectAnswer, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Respuestas no contestadas: \", ctx_r1.notAnsweredQuestions, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Tu puntaje es: \", ctx_r1.points, \" Puntos\");\n  }\n}\n\nexport let QuestionComponent = /*#__PURE__*/(() => {\n  class QuestionComponent {\n    constructor(questionService) {\n      this.questionService = questionService;\n      this.name = \"\"; //initial name of the user\n\n      this.questionList = []; //initial question list is an empty array\n\n      this.currentQuestion = 0; //the question number, an array index\n\n      this.points = 0; // Number of points of the player\n\n      this.segundos = 60; // seconds that we give to answer a question\n\n      this.questionId = 1; // to save the Id of the question\n\n      this.answerId = 0; // to save the Id of the answer\n\n      this.numeroPreguntas = 0; // number of question of the trivia, number of elements of the JSON\n\n      this.counter = this.segundos; // The seconds we give each question \n\n      this.correctAnswer = 0; // correct answer counter \n\n      this.inCorrectAnswer = 0; //  incorrect answer counter \n\n      this.progress = \"0\"; // for the progress bar\n\n      this.isQuizCompleted = false; // If it is false the trivia did not end, is used to change to the last screen\n\n      this.answerPoints = 0; // to save the points I receive from the answer\n\n      this.questionNumber = []; // unordered list of quiestion we change the order at each start\n\n      this.numberQuestionTrivia = 5; // number of questions per trivia game\n\n      this.notAnsweredQuestions = 0; // number of not answered questions \n    }\n\n    ngOnInit() {\n      // console.log('ngOnInit started') // for debugging\n      this.name = localStorage.getItem(\"name\"); // we get the name from the local storage, the \"!\" indicates that the string wil\n\n      this.getAllQuestions(); // we get all the questions\n\n      this.startCounter(); // we need to start the counter, if not we get an error\n    }\n\n    resetQuiz() {\n      this.resetCounter();\n      this.getAllQuestions();\n      this.points = 0;\n      this.currentQuestion = 0;\n      this.progress = \"0\";\n    }\n\n    getAllQuestions() {\n      this.questionService.getTriviaJson().subscribe(res => {\n        this.questionList = res;\n        this.numeroPreguntas = this.questionList.length;\n        /* console.log('This question list')  // for debugging\r\n        console.log(this.questionList); // for debugging\r\n        console.log('This question list lenght')  // for debugging\r\n        console.log(this.numeroPreguntas);  // for debugging\r\n        console.log('This points'); // for debugging\r\n        console.log(this.points); // for debugging */\n\n        this.Shuffle(); // create an unordered array of number of questions\n      });\n    }\n\n    nextQuestion() {\n      if (this.currentQuestion + 1 == this.numberQuestionTrivia) {\n        // do we completed the number of questions?\n        // console.log('Salte a la ultima pregunta')\n        this.isQuizCompleted = true;\n        this.stopCounter();\n      }\n\n      this.currentQuestion++;\n      this.resetCounter();\n      this.getProgressPercent();\n      this.notAnsweredQuestions++; // add one to the not answered questions\n    } // core of the Trivia logic\n\n\n    answer(currentQno, option) {\n      // the next block adds the points after each answer\n      // block for debugging\n\n      /*  console.log('Respuesta Correcta');\r\n       console.log(this.questionList[this.questionNumber[this.currentQuestion]].respuestaCorrecta);\r\n       console.log('option.idRespuesta');\r\n       console.log(option.idRespuesta);\r\n      */\n      // check if the answer is correct\n      if (this.questionList[this.questionNumber[this.currentQuestion]].respuestaCorrecta == option.idRespuesta) {\n        this.points += 1; // add one point \n\n        this.correctAnswer++; // add one correct answer\n      } else {\n        this.inCorrectAnswer++; // add one incorrect answer\n      }\n\n      if (currentQno == this.numberQuestionTrivia) {\n        // do we completed the number of questions?\n        this.isQuizCompleted = true;\n        this.stopCounter();\n      }\n\n      this.currentQuestion++; // jump to the next question\n\n      this.resetCounter();\n      this.getProgressPercent(); // calculate the new progress \n    }\n\n    startCounter() {\n      this.interval$ = interval(1000) // we define an interval of 1 second\n      .subscribe(val => {\n        this.counter--; //each second we decrease the val by one \n\n        console.log(this.currentQuestion);\n\n        if (this.counter === 0) {\n          this.currentQuestion++;\n\n          if (this.currentQuestion + 1 > this.numberQuestionTrivia) {\n            // the Trivia is completed\n            this.notAnsweredQuestions++;\n            this.isQuizCompleted = true;\n            this.stopCounter();\n          } else {\n            this.counter = this.segundos;\n            this.getProgressPercent();\n            this.notAnsweredQuestions++; // add one to the not answered questions \n          }\n        }\n      });\n      setTimeout(() => {\n        this.interval$.unsubscribe(); // after 10 minutes unsubscribe to this interval and we stop the counter\n      }, 6000000);\n    }\n\n    stopCounter() {\n      this.interval$.unsubscribe(); //unsubscribe the interval \n\n      this.counter = 0; // reset the counter to 0\n    }\n\n    resetCounter() {\n      this.stopCounter(); // stop the counter\n\n      this.counter = this.segundos; // put counter on segundos \n\n      this.startCounter(); // start again the counter\n    }\n\n    getProgressPercent() {\n      this.progress = (this.currentQuestion / this.numberQuestionTrivia * 100).toString();\n      return this.progress;\n    }\n\n    Shuffle() {\n      var n = this.numeroPreguntas;\n      this.questionNumber = [...Array(n).keys()]; // shuffle the array\n\n      let i = this.questionNumber.length;\n\n      while (--i > 0) {\n        let randIndex = Math.floor(Math.random() * (i + 1));\n        [this.questionNumber[randIndex], this.questionNumber[i]] = [this.questionNumber[i], this.questionNumber[randIndex]];\n      }\n      /* console.log('questionNumber') //for debugging\r\n      console.log(this.questionNumber) //for debugging */\n\n\n      return this.questionNumber;\n    }\n\n  }\n\n  QuestionComponent.ɵfac = function QuestionComponent_Factory(t) {\n    return new (t || QuestionComponent)(i0.ɵɵdirectiveInject(i1.QuestionService));\n  };\n\n  QuestionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionComponent,\n    selectors: [[\"app-question\"]],\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"preguntas\"], [1, \"container\", \"py-5\"], [1, \"card\"], [4, \"ngIf\"], [1, \"d-flex\", \"justify-content-between\", \"marquee\"], [1, \"image\"], [\"src\", \"https://i.pinimg.com/originals/f3/48/49/f34849cdb1fd97dd6feb285115ecfbb3.jpg\", \"width\", \"120\", \"alt\", \"logo\"], [1, \"quiz-header\"], [2, \"font-family\", \"cursive\"], [2, \"font-style\", \"italic\"], [1, \"d-flex\", \"justify-content-around\", \"py-3\"], [1, \"score\"], [1, \"question-remain\"], [1, \"timer\"], [1, \"fa\", \"fa-spinner\", \"fa-pulse\"], [\"class\", \"progress mb-3\", 4, \"ngIf\"], [1, \"question\"], [1, \"options\"], [4, \"ngFor\", \"ngForOf\"], [1, \"d-flex\", \"justify-content-around\"], [1, \"btn\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"fa\", \"fa-refresh\", \"text-primary\", \"fa-3x\"], [1, \"btn\", 3, \"disabled\", \"click\"], [\"aria-hidden\", \"true\", 1, \"fa\", \"text-primary\", \"fa-chevron-right\", \"fa-3x\"], [1, \"progress\", \"mb-3\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", \"progress-bar-striped\", \"bg-danger\", 3, \"ngStyle\"], [3, \"click\"], [1, \"row\", \"d-flex\", \"justify-content-between\", \"marquee\"], [\"src\", \"https://image.shutterstock.com/image-vector/congratulations-paper-banner-color-confetti-260nw-401555809.jpg\", \"alt\", \"\", 1, \"img-fluid\", \"col-sm-12\", \"mx-auto\", 2, \"width\", \"50%\"], [1, \"result\", \"text-center\", \"col-md-6\", \"col-sm-12\"], [1, \"text-danger\"]],\n    template: function QuestionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵtemplate(3, QuestionComponent_ng_container_3_Template, 35, 8, \"ng-container\", 3);\n        i0.ɵɵtemplate(4, QuestionComponent_ng_container_4_Template, 21, 6, \"ng-container\", 3);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isQuizCompleted);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isQuizCompleted);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i2.NgStyle],\n    styles: [\".card[_ngcontent-%COMP%]{max-width:800px;max-height:auto;margin:0 auto;padding-left:10px;padding-top:5px;padding-bottom:5px;background-color:#fec89a;font-weight:700}.marquee[_ngcontent-%COMP%]{padding:20px}li[_ngcontent-%COMP%]{list-style-type:none;cursor:pointer;margin:0}li[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]:hover{border:2px solid black;background-color:maroon;font-weight:700;color:#fff}ol[_ngcontent-%COMP%]{padding:0}.preguntas[_ngcontent-%COMP%]{background-image:url(https://cdn.britannica.com/95/189695-050-889D438E/Nighttime-skyline-Doha-Qatar.jpg);height:100vh}\"]\n  });\n  return QuestionComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}